package Simple;



public class InsertSort {


    public static void main(String[] args) {

        int [] inputArray = new int[15];
        int [] outputArray;

        for (int i = 0; i < inputArray.length; i++) {
            inputArray[i] = (int) (Math.random()*100);
            System.out.println(inputArray[i]);
        }

        System.out.println("+++++++");

        outputArray = arrInsertSorted2 (inputArray);
        for (int i = 0; i < outputArray.length; i++) {
            System.out.println(outputArray[i]);
        }

    }




    //Игрок, рядом с которым лежит маркер (будем называть его «помеченным» игроком), и все игроки справа от него еще не отсортированы (рис. 3.11, а).
    //Здесь мы собираемся вставить помеченного игрока в подходящее место (частично) отсортированной подгруппы. Однако для этого необходимо сдвинуть некоторых
    //игроков подгруппы вправо, чтобы освободить место для вставки. Для этого помеченный игрок выводится из шеренги (в программе соответствующий элемент
    //данных сохраняется во временной переменной) — этот шаг показан на рис. 3.11, б.
    //Теперь отсортированные игроки сдвигаются, чтобы освободить место в частично
    //отсортированной подгруппе. Самый высокий игрок переходит на место помеченного игрока, следующий по росту — на место самого высокого и т. д.
    //Когда следует остановить перемещение? Представьте, что вы и помеченный
    //игрок двигаетесь влево по шеренге. В каждой позиции игрок перемещается вправо,
    //но вы также сравниваете помеченного игрока с текущим. Процесс перемещения
    //останавливается тогда, когда будет перемещен последний игрок, рост которого
    //Сортировка методом вставки 105
    //превышает рост помеченного игрока. Последнее перемещение открывает свободное
    //место для помеченного игрока, который после вставки окажется в правильном порядке частичной сортировки

    //количество перестановок O(N)
//количество сравнений O(N2)
    public static int [] arrInsertSorted ( int [] arr){
        int mark ;

        for (int i = 1; i < arr.length ; i++) {
            mark = arr[i];
            if(mark <= arr[i-1]){
                for (int j = i; j > 0 ; j--) {
                    if(mark <= arr [j-1]){
                        arr[j] = arr[j-1];
                        arr[j-1] = mark;
                    } else break;
                }
            }
        }
        return arr;
    }


    // вариант получше(да идентичный)
    public static int[] arrInsertSorted2 (int [] arr){
            int j;
        for (int i = 1; i < arr.length ; i++) {
            j = i;
            do {
                if(arr[j]<arr[j-1]){
                    swap(j, j-1, arr);  }
                j--;
            }while (j>=1);
        }
        return arr;
    }

    public static void swap(int a, int b, int[] arr) {
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }



}
