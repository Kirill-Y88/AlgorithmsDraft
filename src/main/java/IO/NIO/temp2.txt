fajaosgjsaogua98sosidjosajsdsgsa
sdb;dafbambsabsanj286=7555
в лесу родилась елочка в лесу она росла, зимой и летом стройня зеленая былу
Считывает данные длиной до b байт из этого входного потока в массив байтов. Этот метод блокируется до тех пор, пока не будет доступен какой-либо ввод.
Емкость (Capacity) — у буфера есть фиксированный размер (емкость).
Позиция (Position) — позиция ячейки в буфере, куда производится запись. Максимально возможное значение равно (capacity – 1). При записи эта позиция увеличивается. В режиме чтения position указывает на ячейку, значение которой будет считано, при чтении позиция увеличивается. При переходе (flip) с режима записи на режим чтения позиция сбрасывается в 0.
Предел (Limit) — в режиме записи limit показывает, сколько данных можно записать в буфер, и предел равен емкости. При переключении в режим чтения limit показывает, до какой ячейки можно читать данные. При переключении из режима записи в режим чтения limit устанавливается в последнюю позицию записи.
Методы для работы с буферами
flip() — переключает буфер из режима записи в режим чтения. При вызове этого метода позиция сбрасывается в 0 и limit устанавливается в ячейку, где только что был position. При переключении в режим чтения позиция обнуляется, и можно читать буфер с начала. Учитывая, что limit ставится в последнюю записанную ячейку, мы не можем прочитать больше данных, чем только что записали.
rewind() — сбрасывает position в 0, так что прочитанные данные могут быть прочитаны снова.
mark() и reset() — первый запоминает позицию в буфере, второй возвращает позицию в ранее запомненную.
clear() — сбрасывает буфер. Позиция устанавливается на 0, limit уравнивается с capacity. Данные в буфере остаются, но из-за смещения маркеров они недоступны.
compact() — удаляет из буфера прочитанные данные, а непрочитанные переносятся в начало буфера.
Простой пример чтения канала
Использование буфера для чтения/записи данных обычно состоит из 4 шагов:
    1. Запись данных в буфер.
    2. Переключение буфера в режим чтения (flip).
    3. Чтение данных из буфера, очистка буфера (clear).
 RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
    FileChannel inChannel = aFile.getChannel();
    ByteBuffer buf = ByteBuffer.allocate(48);
    int bytesRead = inChannel.read(buf);
    while (bytesRead != -1) {
      buf.flip();
      while(buf.hasRemaining()){
          System.out.print((char) buf.get());
      }
      buf.clear();
      bytesRead = inChannel.read(buf);
    }
    aFile.close();
Запись данных в буфер
В буфер данные можно записать двумя способами:
    1. Записать данные из канала в буфер.
    2. Записать данные в буфер вручную.
int bytesRead = inChannel.read(buf); 		// 1
buf.put(127); 					      // 2
Чтение данных из буфера
Существует два способа чтения данных из буфера:
    1. Прочитать данные из буфера и отправить в канал.
    2. Прочитать данные из буфера вручную.
int bytesWritten = inChannel.write(buf); 	// 1
byte aByte = buf.get();    			// 2

Работа с FileChannel
FileChannel всегда работает только в блокирующем режиме. Для начала работы необходимо открыть канал, но напрямую это сделать нельзя. Его можно получить через InputStream, OutputStream или RandomAccessFile. Пример работы через RandomAccessFile:
RandomAccessFile aFile     = new RandomAccessFile("data/nio-data.txt", "rw");
FileChannel      inChannel = aFile.getChannel();
Чтение данных из FileChannel
Для чтения данных из канала используется метод read(). Пример:
ByteBuffer buf = ByteBuffer.allocate(48);

int bytesRead = inChannel.read(buf);
Сначала необходимо создать Buffer, после чего с помощью метода FileChannel.read() прочитать данные из файла в него. Метод read() возвращает int, который обозначает количество прочитанных байт. Если вернулось значение -1, был достигнут конец файла.
Запись данных в FileChannel
Запись данных в канал осуществляется через метод write(), в качестве аргумента принимает Buffer:
String newData = "New String to write to file..." + System.currentTimeMillis();

ByteBuffer buf = ByteBuffer.allocate(48);
buf.clear();
buf.put(newData.getBytes());

buf.flip();

while(buf.hasRemaining()) {
    channel.write(buf);
}
Как видим в коде, метод FileChannel.write() работает в цикле и не сообщает, сколько байт было записано в файл. Он работает до тех пор, пока в буфере есть данные.
Закрытие FileChannel
По завершении работы FileChannel необходимо закрыть:
channel.close();
FileChannel Position
При чтении или записи данных из/в FileChannel курсор установлен на определенной позиции файла. Положение курсора можно узнать с помощью метода FileChannel.position(). Через него же можно указать позицию курсора в файле:
long pos = channel.position();
channel.position(pos + 100);
Если указать позицию за пределами файла, при попытке чтения будет получено значение –1, означающее конец файла. Если же указать позицию за пределами файла в режиме записи, он будет расширен до этого значения и запись продолжится.
FileChannel Size
Метод size() позволяет узнать размер файла.
long fileSize = channel.size();
FileChannel Truncate
Метод truncate() позволяет обрезать файл до указанного размера.
channel.truncate(1024);
Практическое задание
    1. Подготовить текстовый файл с описанием проделанной за неделю работы, вопросами по решению отдельных задач (если они возникли) и блоками кода, которые вызвали у вас затруднения (если такие есть);
    2. * Реализовать передачу файла с клиента на сервер используя java.io или java.nio.
Дополнительные материалы
    1. https://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html
    2. https://habr.com/post/235585/
Используемая литература
Для подготовки данного методического пособия были использованы следующие ресурсы:
    1. http://tutorials.jenkov.com/java-nio/index.html
    2. https://docs.oracle.com/javase/tutorial/essential/io/fileio.html

